
set MESSAGE_PORT 42
set BROADCAST_ADDR -1

# protocal and channel initial
set val(chan)		Channel/WirelessChannel   ;
set val(prop)           Propagation/TwoRayGround  ;
set val(netif)          Phy/WirelessPhy		  ;


set val(mac)		Mac/802_11		  ;		# Mac tpye: other could be Mac/802_11, Mac


set val(ifq)        	Queue/DropTail/PriQueue	  ;		#interface queue tyoe
set val(ll)             LL                        ;
set val(ant)            Antenna/OmniAntenna	  ;
set val(ifqlen)         50              	  ;		#set max packet in ifq
set val(rp) DumbAgent		  		  ; 		#???, other could be DSDV, AODV, DSR

# topology information initial
set group_size 4
set num_groups 6
set num_nodes [expr $group_size * $num_groups]
set val(x)	[expr 120*$group_size + 500]
set val(y)	[expr 240*$num_groups + 200]


# new simulator object
set ns [new Simulator]

#open a file for trace data
set f [open MyWirelessFlooding-$val(rp).tr w]
$ns trace-all $f
#open a file for nam trace data
set nf [open MyWirelessFlooding-$val(rp).nam w]
$ns namtrace-all $nf $val(x) $val(y)

#???
$ns use-newtrace

#set new topology
set topo [new Topology]
$topo load_flatgrid $val(x) $val(y)

#create god???
create-god $num_nodes

#set new channel
set chan_1_ [new $val(chan)]

$ns node-config -adhocRouing $val(rp)\
		-llType $val(ll)\
		-macType $val(mac)\
		-ifqType $val(ifq)\
		-ifqLen $val(ifqlen)\
		-antType $val(ant)\
		-propType $val(prop)\
		-phyType $val(netif)\
		-topoInstance $topo\
		-agentTrace ON\
		-routerTrace OFF\
		-macTrace ON\
		-movementTrace OFF\
		-channel $chan_1_

#show inheritance relation between two class
Class Agent/MessagePassing/MYFLOODING -superclass Agent/MessagePassing

#receive function
Agent/MessagePassing/MYFLOODING instproc recv {source sport size data} {
	$self instvar messages_seen node_
	global ns BROADCAST_ADDR 
	
	#???extract message ID from message
	set message_id [lindex [split $data ":"] 0]
	puts "\nNode [$node_ node-addr] got message $message_id\n"

	if {[lsearch $messages_seen $message_id] == -1} {
		lappend messages_seen $message_id
        	$ns trace-annotate "[$node_ node-addr] received {$data} from $source"
        	$ns trace-annotate "[$node_ node-addr] sending message $message_id"
		$self sendto $size $data $BROADCAST_ADDR $sport
    	} else {
        	$ns trace-annotate "[$node_ node-addr] received redundant message $message_id from $source"
    	}
}


#send function
Agent/MessagePassing/MYFLOODING instproc send_message {size message_id data port} {
	$self instvar messages_seen node_
	global ns MESSAGE_PORT BROADCAST_ADDR

	lappend message_seen $message_id
	$ns trace-annotate "[$node_ node-addr] sending message $message_id"
	$self sendto $size "$message_id:$data" $BROADCAST_ADDR $port
}

#create nodes
for {set i 0} {$i < $num_nodes} {incr i}{
	set n($i) [$ns node]
	$n($i) set Y_ [expr 230*floor($i/$group_size) + 160*(($i%$group_size)>=($group_size/2))]
    	$n($i) set X_ [expr (90*$group_size)*($i/$group_size%2) + 200*($i%($group_size/2))]
	$n($i) set Z_ 0.0
	$ns initial_node_pos $n($i) 20
}

#attach MyFlooding Agent to node on port $MESSAGE_PORT
for {set i 0} {$i < $num_nodes} {incr i} {
	set a($i) [new Agent/MessagePassing/MYFLOODING]
	$n($i) attach $a($i) $MESSAGE_PORT
	$a($i) set messages_seen {}
}

#set up events
$ns at 0.5 "$a(1) send_message 200 1 {first message}  $MESSAGE_PORT"
$ns at 1.0 "finish"

#process that closes trace file and starts nam
proc finish {} {
	global ns f nf
	$ns flush-trace
	
	close $f
	close $nf
	
	exit 0
}

$ns run
